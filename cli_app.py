import psycopg2
import hashlib
from getpass import getpass
from db import get_connection
from character_logic import generate_character_data

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def register():
    print("\n=== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===")
    username = input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω: ")
    password = getpass("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO users (username, password_hash) VALUES (%s, %s)",
                    (username, hash_password(password)))
        conn.commit()
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
    except:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None
    finally:
        cur.close()
        conn.close()
    return login(username, password)

def login(existing_username=None, existing_password=None):
    print("\n=== –í—Ö–æ–¥ ===")
    username = existing_username or input("–õ–æ–≥–∏–Ω: ")
    password = existing_password or getpass("–ü–∞—Ä–æ–ª—å: ")

    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, password_hash FROM users WHERE username = %s", (username,))
    user = cur.fetchone()
    cur.close()
    conn.close()

    if user and user[1] == hash_password(password):
        print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
        return user[0]
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
        return None

def save_character(character, user_id):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO characters (
            name, race, class, background, subclass,
            strength, dexterity, constitution, intelligence, wisdom, charisma,
            user_id, portrait, skills, features
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (
        character["name"],
        character["race"],
        character["class"],
        character["background"],
        character["subclass"],
        character["stats"]["–°–∏–ª–∞"],
        character["stats"]["–õ–æ–≤–∫–æ—Å—Ç—å"],
        character["stats"]["–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ"],
        character["stats"]["–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
        character["stats"]["–ú—É–¥—Ä–æ—Å—Ç—å"],
        character["stats"]["–•–∞—Ä–∏–∑–º–∞"],
        user_id,
        character.get("portrait", ""),
        "\n".join(character.get("skills", [])),
        "\n".join(character.get("features", []))
    ))
    conn.commit()
    cur.close()
    conn.close()

def list_characters(user_id):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM characters WHERE user_id = %s", (user_id,))
    characters = cur.fetchall()
    cur.close()
    conn.close()
    return characters

def get_character_by_id(char_id):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT name, race, class, background, subclass, strength, dexterity,
               constitution, intelligence, wisdom, charisma,
               portrait, skills, features
        FROM characters WHERE id = %s
    """, (char_id,))
    char = cur.fetchone()
    cur.close()
    conn.close()
    return char

def main_menu(user_id):
    while True:
        print("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===")
        print("[1] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print("[2] –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        print("[0] –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–æ—Ä: ")

        if choice == "1":
            character = generate_character_data()
            save_character(character, user_id)
            print(f"\nüßù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {character['name']}")
        elif choice == "2":
            chars = list_characters(user_id)
            if not chars:
                print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
                continue
            print("\n–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:")
            for idx, (char_id, name) in enumerate(chars, start=1):
                print(f"[{idx}] {name}")
            selected = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
            if selected.isdigit() and 1 <= int(selected) <= len(chars):
                char_id = chars[int(selected) - 1][0]
                char = get_character_by_id(char_id)
                if char:
                    print("\n=== –ü–ï–†–°–û–ù–ê–ñ ===")
                    labels = ["–ò–º—è", "–†–∞—Å–∞", "–ö–ª–∞—Å—Å", "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è", "–ü–æ–¥–∫–ª–∞—Å—Å",
                              "–°–∏–ª–∞", "–õ–æ–≤–∫–æ—Å—Ç—å", "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
                              "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ú—É–¥—Ä–æ—Å—Ç—å", "–•–∞—Ä–∏–∑–º–∞",
                              "–ü–æ—Ä—Ç—Ä–µ—Ç", "", "–£–º–µ–Ω–∏—è"]
                    for label, val in zip(labels, char):
                        print(f"{label}: {val}")
        elif choice == "0":
            print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    print("=== –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DnD –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ===")
    while True:
        print("\n[1] –í–æ–π—Ç–∏")
        print("[2] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        print("[0] –í—ã—Ö–æ–¥")
        action = input("–í—ã–±–æ—Ä: ")

        if action == "1":
            uid = login()
            if uid:
                main_menu(uid)
        elif action == "2":
            uid = register()
            if uid:
                main_menu(uid)
        elif action == "0":
            break
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
